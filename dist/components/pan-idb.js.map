{
  "version": 3,
  "sources": ["../../pan/components/pan-idb.mjs"],
  "sourcesContent": ["// <pan-idb> \u2014 IndexedDB bridge to PAN topics\n// Attributes:\n//   - database: database name (required)\n//   - version: database version (default: 1)\n//   - store: object store name (required)\n//   - key-path: key path for objects (default: \"id\")\n//   - auto-increment: use auto-incrementing keys (default: false)\n//   - indexes: JSON array of index configs: [{name, keyPath, unique?, multiEntry?}]\n//\n// Topics (where resource = store name):\n//   - Subscribes: ${resource}.idb.get { key }\n//   - Subscribes: ${resource}.idb.put { item }\n//   - Subscribes: ${resource}.idb.add { item }\n//   - Subscribes: ${resource}.idb.delete { key }\n//   - Subscribes: ${resource}.idb.clear {}\n//   - Subscribes: ${resource}.idb.list { index?, range?, direction?, limit? }\n//   - Subscribes: ${resource}.idb.query { index, value }\n//   - Publishes: ${resource}.idb.result { success, data?, error? }\n//   - Publishes: ${resource}.idb.ready {}\n\nimport { PanClient } from './pan-client.mjs';\n\nexport class PanIDB extends HTMLElement {\n  static get observedAttributes() {\n    return ['database', 'version', 'store', 'key-path', 'auto-increment', 'indexes'];\n  }\n\n  constructor() {\n    super();\n    this.pc = new PanClient(this);\n    this.db = null;\n    this.initPromise = null;\n  }\n\n  connectedCallback() {\n    this.#init();\n    this.#subscribe();\n  }\n\n  disconnectedCallback() {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n  }\n\n  attributeChangedCallback(name) {\n    if (['database', 'version', 'store'].includes(name) && this.isConnected) {\n      if (this.db) {\n        this.db.close();\n        this.db = null;\n      }\n      this.#init();\n    }\n  }\n\n  get database() { return this.getAttribute('database') || ''; }\n  get version() { return Number(this.getAttribute('version')) || 1; }\n  get store() { return this.getAttribute('store') || ''; }\n  get keyPath() { return this.getAttribute('key-path') || 'id'; }\n  get autoIncrement() { return this.hasAttribute('auto-increment'); }\n  get indexes() {\n    const attr = this.getAttribute('indexes');\n    if (!attr) return [];\n    try {\n      return JSON.parse(attr);\n    } catch {\n      return [];\n    }\n  }\n\n  // Public API\n  async get(key) {\n    await this.initPromise;\n    return this.#transaction('readonly', (store) => store.get(key));\n  }\n\n  async put(item) {\n    await this.initPromise;\n    return this.#transaction('readwrite', (store) => store.put(item));\n  }\n\n  async add(item) {\n    await this.initPromise;\n    return this.#transaction('readwrite', (store) => store.add(item));\n  }\n\n  async delete(key) {\n    await this.initPromise;\n    return this.#transaction('readwrite', (store) => store.delete(key));\n  }\n\n  async clear() {\n    await this.initPromise;\n    return this.#transaction('readwrite', (store) => store.clear());\n  }\n\n  async list(options = {}) {\n    await this.initPromise;\n    const { index, range, direction = 'next', limit } = options;\n\n    return this.#transaction('readonly', (store) => {\n      const source = index ? store.index(index) : store;\n      const request = range\n        ? source.openCursor(range, direction)\n        : source.openCursor(null, direction);\n\n      return new Promise((resolve, reject) => {\n        const results = [];\n        request.onsuccess = (e) => {\n          const cursor = e.target.result;\n          if (cursor && (!limit || results.length < limit)) {\n            results.push(cursor.value);\n            cursor.continue();\n          } else {\n            resolve(results);\n          }\n        };\n        request.onerror = () => reject(request.error);\n      });\n    });\n  }\n\n  async query(index, value) {\n    await this.initPromise;\n    return this.#transaction('readonly', (store) => {\n      return store.index(index).getAll(value);\n    });\n  }\n\n  async count(index) {\n    await this.initPromise;\n    return this.#transaction('readonly', (store) => {\n      const source = index ? store.index(index) : store;\n      return source.count();\n    });\n  }\n\n  #init() {\n    if (!this.database || !this.store) return;\n\n    this.initPromise = new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.database, this.version);\n\n      request.onerror = () => {\n        const error = request.error?.message || 'Failed to open database';\n        this.#publishError('init', error);\n        reject(new Error(error));\n      };\n\n      request.onsuccess = () => {\n        this.db = request.result;\n\n        this.db.onerror = (e) => {\n          this.#publishError('db', e.target.error?.message || 'Database error');\n        };\n\n        this.pc.publish({\n          topic: `${this.store}.idb.ready`,\n          data: { database: this.database, store: this.store }\n        });\n\n        resolve();\n      };\n\n      request.onupgradeneeded = (e) => {\n        const db = e.target.result;\n\n        // Create object store if it doesn't exist\n        if (!db.objectStoreNames.contains(this.store)) {\n          const store = db.createObjectStore(this.store, {\n            keyPath: this.keyPath,\n            autoIncrement: this.autoIncrement\n          });\n\n          // Create indexes\n          for (const idx of this.indexes) {\n            if (idx.name && idx.keyPath) {\n              store.createIndex(idx.name, idx.keyPath, {\n                unique: idx.unique || false,\n                multiEntry: idx.multiEntry || false\n              });\n            }\n          }\n        }\n      };\n    });\n  }\n\n  #subscribe() {\n    const resource = this.store;\n    if (!resource) return;\n\n    // Subscribe to CRUD operations\n    this.pc.subscribe(`${resource}.idb.get`, async (msg) => {\n      try {\n        const data = await this.get(msg.data.key);\n        this.#publishResult('get', { item: data }, msg.id);\n      } catch (error) {\n        this.#publishError('get', error.message, msg.id);\n      }\n    });\n\n    this.pc.subscribe(`${resource}.idb.put`, async (msg) => {\n      try {\n        const key = await this.put(msg.data.item);\n        this.#publishResult('put', { key }, msg.id);\n      } catch (error) {\n        this.#publishError('put', error.message, msg.id);\n      }\n    });\n\n    this.pc.subscribe(`${resource}.idb.add`, async (msg) => {\n      try {\n        const key = await this.add(msg.data.item);\n        this.#publishResult('add', { key }, msg.id);\n      } catch (error) {\n        this.#publishError('add', error.message, msg.id);\n      }\n    });\n\n    this.pc.subscribe(`${resource}.idb.delete`, async (msg) => {\n      try {\n        await this.delete(msg.data.key);\n        this.#publishResult('delete', { key: msg.data.key }, msg.id);\n      } catch (error) {\n        this.#publishError('delete', error.message, msg.id);\n      }\n    });\n\n    this.pc.subscribe(`${resource}.idb.clear`, async (msg) => {\n      try {\n        await this.clear();\n        this.#publishResult('clear', {}, msg.id);\n      } catch (error) {\n        this.#publishError('clear', error.message, msg.id);\n      }\n    });\n\n    this.pc.subscribe(`${resource}.idb.list`, async (msg) => {\n      try {\n        const items = await this.list(msg.data);\n        this.#publishResult('list', { items }, msg.id);\n      } catch (error) {\n        this.#publishError('list', error.message, msg.id);\n      }\n    });\n\n    this.pc.subscribe(`${resource}.idb.query`, async (msg) => {\n      try {\n        const items = await this.query(msg.data.index, msg.data.value);\n        this.#publishResult('query', { items }, msg.id);\n      } catch (error) {\n        this.#publishError('query', error.message, msg.id);\n      }\n    });\n\n    this.pc.subscribe(`${resource}.idb.count`, async (msg) => {\n      try {\n        const count = await this.count(msg.data.index);\n        this.#publishResult('count', { count }, msg.id);\n      } catch (error) {\n        this.#publishError('count', error.message, msg.id);\n      }\n    });\n  }\n\n  #transaction(mode, callback) {\n    return new Promise((resolve, reject) => {\n      if (!this.db) {\n        reject(new Error('Database not initialized'));\n        return;\n      }\n\n      try {\n        const tx = this.db.transaction(this.store, mode);\n        const store = tx.objectStore(this.store);\n        const request = callback(store);\n\n        if (request && request.onsuccess !== undefined) {\n          request.onsuccess = () => resolve(request.result);\n          request.onerror = () => reject(request.error);\n        } else if (request instanceof Promise) {\n          request.then(resolve).catch(reject);\n        } else {\n          // If callback returns a value directly (like for cursors)\n          resolve(request);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  #publishResult(operation, data, requestId) {\n    this.pc.publish({\n      topic: `${this.store}.idb.result`,\n      data: {\n        operation,\n        success: true,\n        ...data,\n        requestId\n      }\n    });\n  }\n\n  #publishError(operation, error, requestId) {\n    this.pc.publish({\n      topic: `${this.store}.idb.error`,\n      data: {\n        operation,\n        success: false,\n        error,\n        requestId\n      }\n    });\n  }\n}\n\ncustomElements.define('pan-idb', PanIDB);\nexport default PanIDB;\n"],
  "mappings": "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",
  "names": []
}
