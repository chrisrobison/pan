{
  "version": 3,
  "sources": ["../../pan/components/pan-websocket.mjs"],
  "sourcesContent": ["// <pan-websocket> \u2014 Bidirectional WebSocket \u2194 PAN bridge\n// Attributes:\n//   - url: WebSocket server URL\n//   - protocols: optional protocol string\n//   - outbound-topics: space-sep list of topics to forward to server\n//   - inbound-topics: space-sep list of topics to publish from server\n//   - auto-reconnect: enable automatic reconnection (default: true)\n//   - reconnect-delay: min,max delay in ms (default: \"1000,15000\")\n//   - heartbeat: seconds between ping messages (default: 30)\n//   - heartbeat-topic: topic for heartbeat pings (default: \"sys.ping\")\n//\n// Topics:\n//   - Publishes: ws.connected, ws.disconnected, ws.error\n//   - Publishes: ws.message (raw message events)\n//   - Subscribes to outbound-topics and forwards to WebSocket\n//   - Publishes inbound messages to PAN\n\nimport { PanClient } from './pan-client.mjs';\n\nexport class PanWebSocket extends HTMLElement {\n  static get observedAttributes() {\n    return ['url', 'protocols', 'outbound-topics', 'inbound-topics',\n            'auto-reconnect', 'reconnect-delay', 'heartbeat', 'heartbeat-topic'];\n  }\n\n  constructor() {\n    super();\n    this.pc = new PanClient(this);\n    this.ws = null;\n    this.reconnectTimer = null;\n    this.heartbeatTimer = null;\n    this.reconnectAttempts = 0;\n    this.stopped = false;\n    this.subscriptions = [];\n  }\n\n  connectedCallback() {\n    this.#connect();\n    this.#setupOutboundSubscriptions();\n  }\n\n  disconnectedCallback() {\n    this.stopped = true;\n    this.#disconnect();\n    this.#clearSubscriptions();\n  }\n\n  attributeChangedCallback(name) {\n    if (name === 'url' && this.isConnected) {\n      this.#reconnect();\n    } else if (name === 'outbound-topics' && this.isConnected) {\n      this.#clearSubscriptions();\n      this.#setupOutboundSubscriptions();\n    }\n  }\n\n  get url() { return this.getAttribute('url') || ''; }\n  get protocols() { return this.getAttribute('protocols') || ''; }\n  get outboundTopics() {\n    const t = (this.getAttribute('outbound-topics') || '').trim();\n    return t ? t.split(/\\s+/) : [];\n  }\n  get inboundTopics() {\n    const t = (this.getAttribute('inbound-topics') || '').trim();\n    return t ? t.split(/\\s+/) : ['*'];\n  }\n  get autoReconnect() {\n    return this.getAttribute('auto-reconnect') !== 'false';\n  }\n  get reconnectDelay() {\n    const s = (this.getAttribute('reconnect-delay') || '1000,15000').split(',').map(x => Number(x) || 0);\n    const [min, max] = [Math.max(100, s[0] || 1000), Math.max(s[1] || s[0] || 15000, s[0] || 1000)];\n    return { min, max };\n  }\n  get heartbeat() {\n    return Number(this.getAttribute('heartbeat')) || 30;\n  }\n  get heartbeatTopic() {\n    return this.getAttribute('heartbeat-topic') || 'sys.ping';\n  }\n\n  // Public API\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(typeof data === 'string' ? data : JSON.stringify(data));\n    }\n  }\n\n  close() {\n    this.stopped = true;\n    this.#disconnect();\n  }\n\n  reconnect() {\n    this.#reconnect();\n  }\n\n  #connect() {\n    if (!this.url || this.stopped) return;\n\n    try {\n      const ws = this.protocols\n        ? new WebSocket(this.url, this.protocols.split(',').map(p => p.trim()))\n        : new WebSocket(this.url);\n\n      this.ws = ws;\n\n      ws.addEventListener('open', () => this.#handleOpen());\n      ws.addEventListener('message', (e) => this.#handleMessage(e));\n      ws.addEventListener('close', (e) => this.#handleClose(e));\n      ws.addEventListener('error', (e) => this.#handleError(e));\n\n    } catch (error) {\n      this.#handleError(error);\n      this.#scheduleReconnect();\n    }\n  }\n\n  #disconnect() {\n    this.#stopHeartbeat();\n    this.#cancelReconnect();\n\n    if (this.ws) {\n      try {\n        this.ws.close();\n      } catch (e) {\n        // ignore\n      }\n      this.ws = null;\n    }\n  }\n\n  #reconnect() {\n    this.#disconnect();\n    this.reconnectAttempts = 0;\n    this.stopped = false;\n    this.#connect();\n  }\n\n  #scheduleReconnect() {\n    if (!this.autoReconnect || this.stopped) return;\n\n    this.#cancelReconnect();\n\n    const { min, max } = this.reconnectDelay;\n    const delay = Math.min(\n      max,\n      min * Math.pow(1.5, this.reconnectAttempts) + Math.random() * 1000\n    );\n\n    this.reconnectAttempts++;\n\n    this.reconnectTimer = setTimeout(() => {\n      this.#connect();\n    }, delay);\n  }\n\n  #cancelReconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n  }\n\n  #startHeartbeat() {\n    this.#stopHeartbeat();\n\n    if (this.heartbeat <= 0) return;\n\n    this.heartbeatTimer = setInterval(() => {\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        this.send({ topic: this.heartbeatTopic, ts: Date.now() });\n      }\n    }, this.heartbeat * 1000);\n  }\n\n  #stopHeartbeat() {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  #handleOpen() {\n    this.reconnectAttempts = 0;\n    this.#startHeartbeat();\n\n    this.pc.publish({\n      topic: 'ws.connected',\n      data: { url: this.url, timestamp: Date.now() }\n    });\n  }\n\n  #handleMessage(event) {\n    try {\n      const data = JSON.parse(event.data);\n\n      // Publish raw message event\n      this.pc.publish({\n        topic: 'ws.message',\n        data: { message: data, timestamp: Date.now() }\n      });\n\n      // If it's a PAN message, publish to the appropriate topic\n      if (data.topic) {\n        // Check if this topic should be forwarded to PAN\n        const shouldPublish = this.inboundTopics.some(pattern =>\n          this.#matchTopic(data.topic, pattern)\n        );\n\n        if (shouldPublish) {\n          const msg = {\n            topic: data.topic,\n            data: data.data || data.payload || data\n          };\n\n          if (typeof data.retain === 'boolean') {\n            msg.retain = data.retain;\n          }\n\n          this.pc.publish(msg);\n        }\n      }\n    } catch (error) {\n      // If not JSON, publish as raw data\n      this.pc.publish({\n        topic: 'ws.message',\n        data: { raw: event.data, timestamp: Date.now() }\n      });\n    }\n  }\n\n  #handleClose(event) {\n    this.#stopHeartbeat();\n\n    this.pc.publish({\n      topic: 'ws.disconnected',\n      data: {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean,\n        timestamp: Date.now()\n      }\n    });\n\n    if (!this.stopped) {\n      this.#scheduleReconnect();\n    }\n  }\n\n  #handleError(error) {\n    this.pc.publish({\n      topic: 'ws.error',\n      data: {\n        error: error.message || 'WebSocket error',\n        timestamp: Date.now()\n      }\n    });\n  }\n\n  #setupOutboundSubscriptions() {\n    // Subscribe to topics that should be forwarded to WebSocket\n    for (const pattern of this.outboundTopics) {\n      const unsub = this.pc.subscribe(pattern, (msg) => {\n        // Don't forward WebSocket system topics\n        if (msg.topic.startsWith('ws.')) return;\n\n        // Forward message to WebSocket server\n        this.send({\n          topic: msg.topic,\n          data: msg.data,\n          ts: msg.ts,\n          id: msg.id\n        });\n      });\n\n      this.subscriptions.push(unsub);\n    }\n  }\n\n  #clearSubscriptions() {\n    for (const unsub of this.subscriptions) {\n      if (typeof unsub === 'function') unsub();\n    }\n    this.subscriptions = [];\n  }\n\n  #matchTopic(topic, pattern) {\n    if (pattern === '*' || topic === pattern) return true;\n    if (pattern.includes('*')) {\n      const regex = new RegExp(\n        '^' + pattern.replace(/\\*/g, '[^.]+') + '$'\n      );\n      return regex.test(topic);\n    }\n    return false;\n  }\n}\n\ncustomElements.define('pan-websocket', PanWebSocket);\nexport default PanWebSocket;\n"],
  "mappings": "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",
  "names": []
}
