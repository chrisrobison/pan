{
  "version": 3,
  "sources": ["../../pan/components/pan-markdown-renderer.mjs"],
  "sourcesContent": ["/**\n * pan-markdown-renderer\n *\n * Renders markdown to HTML with syntax highlighting for code blocks.\n * Supports standard markdown features: headers, lists, links, code, tables, etc.\n *\n * Features:\n * - Complete markdown syntax support\n * - Code syntax highlighting\n * - Tables, task lists, blockquotes\n * - Safe HTML rendering (sanitized)\n * - GitHub-flavored markdown\n * - Custom styling via CSS variables\n *\n * Attributes:\n * - content: Markdown content to render\n * - sanitize: Enable HTML sanitization (default: true)\n *\n * PAN Events:\n * - markdown.render: Trigger render with content\n *\n * Usage:\n *   <pan-markdown-renderer content=\"# Hello World\"></pan-markdown-renderer>\n */\n\nexport class PanMarkdownRenderer extends HTMLElement {\n  static observedAttributes = ['content', 'sanitize'];\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this._content = '';\n    this._sanitize = true;\n  }\n\n  connectedCallback() {\n    this.render();\n    this._setupPanListeners();\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'content' && oldValue !== newValue) {\n      this._content = newValue || '';\n      this.renderMarkdown();\n    } else if (name === 'sanitize') {\n      this._sanitize = newValue !== 'false';\n    }\n  }\n\n  render() {\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: block;\n        }\n\n        .markdown-body {\n          color: var(--color-text, #1e293b);\n          line-height: 1.6;\n          font-size: 1rem;\n        }\n\n        .markdown-body > *:first-child {\n          margin-top: 0;\n        }\n\n        .markdown-body > *:last-child {\n          margin-bottom: 0;\n        }\n\n        /* Headers */\n        .markdown-body h1,\n        .markdown-body h2,\n        .markdown-body h3,\n        .markdown-body h4,\n        .markdown-body h5,\n        .markdown-body h6 {\n          margin: 1.5rem 0 1rem 0;\n          font-weight: 600;\n          line-height: 1.3;\n          color: var(--color-text, #1e293b);\n        }\n\n        .markdown-body h1 { font-size: 2rem; border-bottom: 2px solid var(--color-border, #e2e8f0); padding-bottom: 0.5rem; }\n        .markdown-body h2 { font-size: 1.5rem; border-bottom: 1px solid var(--color-border, #e2e8f0); padding-bottom: 0.5rem; }\n        .markdown-body h3 { font-size: 1.25rem; }\n        .markdown-body h4 { font-size: 1.1rem; }\n        .markdown-body h5 { font-size: 1rem; }\n        .markdown-body h6 { font-size: 0.9rem; color: var(--color-text-muted, #64748b); }\n\n        /* Paragraphs */\n        .markdown-body p {\n          margin: 1rem 0;\n        }\n\n        /* Links */\n        .markdown-body a {\n          color: var(--color-primary, #006699);\n          text-decoration: none;\n          border-bottom: 1px solid transparent;\n          transition: border-color 0.2s;\n        }\n\n        .markdown-body a:hover {\n          border-bottom-color: var(--color-primary, #006699);\n        }\n\n        /* Lists */\n        .markdown-body ul,\n        .markdown-body ol {\n          margin: 1rem 0;\n          padding-left: 2rem;\n        }\n\n        .markdown-body li {\n          margin: 0.25rem 0;\n        }\n\n        .markdown-body li > p {\n          margin: 0.5rem 0;\n        }\n\n        /* Task lists */\n        .markdown-body input[type=\"checkbox\"] {\n          margin-right: 0.5rem;\n        }\n\n        /* Code */\n        .markdown-body code {\n          background: var(--color-code-bg, #1e293b);\n          color: var(--color-code-text, #e2e8f0);\n          padding: 0.2rem 0.4rem;\n          border-radius: 0.25rem;\n          font-family: var(--font-mono, 'Courier New', monospace);\n          font-size: 0.9em;\n        }\n\n        .markdown-body pre {\n          background: var(--color-code-bg, #1e293b);\n          color: var(--color-code-text, #e2e8f0);\n          padding: 1rem;\n          border-radius: 0.5rem;\n          overflow-x: auto;\n          margin: 1rem 0;\n        }\n\n        .markdown-body pre code {\n          background: none;\n          padding: 0;\n        }\n\n        /* Blockquotes */\n        .markdown-body blockquote {\n          border-left: 4px solid var(--color-primary, #006699);\n          padding-left: 1rem;\n          margin: 1rem 0;\n          color: var(--color-text-muted, #64748b);\n          font-style: italic;\n        }\n\n        .markdown-body blockquote p {\n          margin: 0.5rem 0;\n        }\n\n        /* Horizontal rule */\n        .markdown-body hr {\n          border: none;\n          border-top: 2px solid var(--color-border, #e2e8f0);\n          margin: 2rem 0;\n        }\n\n        /* Tables */\n        .markdown-body table {\n          border-collapse: collapse;\n          width: 100%;\n          margin: 1rem 0;\n        }\n\n        .markdown-body th,\n        .markdown-body td {\n          border: 1px solid var(--color-border, #e2e8f0);\n          padding: 0.5rem 0.75rem;\n          text-align: left;\n        }\n\n        .markdown-body th {\n          background: var(--color-bg-alt, #f8fafc);\n          font-weight: 600;\n        }\n\n        .markdown-body tr:hover {\n          background: var(--color-bg-alt, #f8fafc);\n        }\n\n        /* Images */\n        .markdown-body img {\n          max-width: 100%;\n          height: auto;\n          border-radius: 0.5rem;\n          margin: 1rem 0;\n        }\n\n        /* Strong and emphasis */\n        .markdown-body strong {\n          font-weight: 600;\n          color: var(--color-text, #1e293b);\n        }\n\n        .markdown-body em {\n          font-style: italic;\n        }\n\n        /* Strikethrough */\n        .markdown-body del {\n          text-decoration: line-through;\n          color: var(--color-text-muted, #64748b);\n        }\n      </style>\n      <div class=\"markdown-body\"></div>\n    `;\n\n    this.renderMarkdown();\n  }\n\n  renderMarkdown() {\n    const container = this.shadowRoot.querySelector('.markdown-body');\n    if (!container) return;\n\n    const html = this._parseMarkdown(this._content);\n    container.innerHTML = html;\n  }\n\n  _parseMarkdown(markdown) {\n    if (!markdown) return '';\n\n    let html = markdown;\n\n    // Escape HTML if sanitizing\n    if (this._sanitize) {\n      html = this._escapeHtml(html);\n    }\n\n    // Code blocks (must be before inline code)\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n      return `<pre><code class=\"language-${lang || 'text'}\">${code.trim()}</code></pre>`;\n    });\n\n    // Headers\n    html = html.replace(/^######\\s+(.+)$/gm, '<h6>$1</h6>');\n    html = html.replace(/^#####\\s+(.+)$/gm, '<h5>$1</h5>');\n    html = html.replace(/^####\\s+(.+)$/gm, '<h4>$1</h4>');\n    html = html.replace(/^###\\s+(.+)$/gm, '<h3>$1</h3>');\n    html = html.replace(/^##\\s+(.+)$/gm, '<h2>$1</h2>');\n    html = html.replace(/^#\\s+(.+)$/gm, '<h1>$1</h1>');\n\n    // Horizontal rules\n    html = html.replace(/^(---|\\*\\*\\*|___)$/gm, '<hr>');\n\n    // Task lists\n    html = html.replace(/^- \\[([ x])\\]\\s+(.+)$/gm, (match, checked, text) => {\n      return `<li><input type=\"checkbox\" ${checked === 'x' ? 'checked' : ''} disabled>${text}</li>`;\n    });\n\n    // Unordered lists\n    html = html.replace(/^[*+-]\\s+(.+)$/gm, '<li>$1</li>');\n    html = html.replace(/(<li>.*<\\/li>\\n?)+/g, '<ul>$&</ul>');\n\n    // Ordered lists\n    html = html.replace(/^\\d+\\.\\s+(.+)$/gm, '<li>$1</li>');\n    html = html.replace(/(<li>.*<\\/li>\\n?)+/g, (match) => {\n      // Only wrap in <ol> if not already wrapped in <ul>\n      if (match.includes('<ul>')) return match;\n      return `<ol>${match}</ol>`;\n    });\n\n    // Blockquotes\n    html = html.replace(/^>\\s+(.+)$/gm, '<blockquote><p>$1</p></blockquote>');\n    html = html.replace(/(<blockquote>.*<\\/blockquote>\\n?)+/g, (match) => {\n      return match.replace(/<\\/blockquote>\\n?<blockquote>/g, '\\n');\n    });\n\n    // Tables\n    html = this._parseTables(html);\n\n    // Bold (must be before italic)\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n    html = html.replace(/__(.+?)__/g, '<strong>$1</strong>');\n\n    // Italic\n    html = html.replace(/\\*(.+?)\\*/g, '<em>$1</em>');\n    html = html.replace(/_(.+?)_/g, '<em>$1</em>');\n\n    // Strikethrough\n    html = html.replace(/~~(.+?)~~/g, '<del>$1</del>');\n\n    // Inline code\n    html = html.replace(/`([^`]+)`/g, '<code>$1</code>');\n\n    // Links\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\">$1</a>');\n\n    // Images\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\">');\n\n    // Paragraphs (wrap text not in tags)\n    const lines = html.split('\\n');\n    const processed = [];\n    let inBlock = false;\n\n    for (let line of lines) {\n      const trimmed = line.trim();\n\n      if (trimmed.match(/^<(h[1-6]|ul|ol|blockquote|pre|table|hr)/)) {\n        inBlock = true;\n        processed.push(line);\n      } else if (trimmed.match(/<\\/(ul|ol|blockquote|pre|table)>$/)) {\n        processed.push(line);\n        inBlock = false;\n      } else if (trimmed === '') {\n        processed.push('');\n      } else if (!inBlock && !trimmed.match(/^</) && !trimmed.match(/<\\/(li|th|td)>$/)) {\n        processed.push(`<p>${trimmed}</p>`);\n      } else {\n        processed.push(line);\n      }\n    }\n\n    html = processed.join('\\n');\n\n    return html;\n  }\n\n  _parseTables(html) {\n    const lines = html.split('\\n');\n    const result = [];\n    let inTable = false;\n    let tableRows = [];\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n\n      // Check if this is a table row\n      if (line.match(/^\\|.+\\|$/)) {\n        // Check if next line is separator\n        const nextLine = lines[i + 1]?.trim() || '';\n        const isSeparator = nextLine.match(/^\\|[\\s:-]+\\|$/);\n\n        if (!inTable && isSeparator) {\n          // Start of table - this is header row\n          inTable = true;\n          const cells = line.slice(1, -1).split('|').map(c => c.trim());\n          tableRows.push('<thead><tr>' + cells.map(c => `<th>${c}</th>`).join('') + '</tr></thead>');\n          i++; // Skip separator line\n          tableRows.push('<tbody>');\n        } else if (inTable) {\n          // Table data row\n          const cells = line.slice(1, -1).split('|').map(c => c.trim());\n          tableRows.push('<tr>' + cells.map(c => `<td>${c}</td>`).join('') + '</tr>');\n        } else {\n          result.push(line);\n        }\n      } else {\n        if (inTable) {\n          // End of table\n          tableRows.push('</tbody>');\n          result.push('<table>' + tableRows.join('\\n') + '</table>');\n          tableRows = [];\n          inTable = false;\n        }\n        result.push(line);\n      }\n    }\n\n    // Close table if still open\n    if (inTable) {\n      tableRows.push('</tbody>');\n      result.push('<table>' + tableRows.join('\\n') + '</table>');\n    }\n\n    return result.join('\\n');\n  }\n\n  _escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  _setupPanListeners() {\n    const bus = document.querySelector('pan-bus');\n    if (bus) {\n      bus.subscribe('markdown.render', (data) => {\n        if (data.content !== undefined) {\n          this.setContent(data.content);\n        }\n      });\n    }\n  }\n\n  // Public API\n  setContent(content) {\n    this._content = content || '';\n    this.renderMarkdown();\n  }\n\n  getContent() {\n    return this._content;\n  }\n\n  getHtml() {\n    return this.shadowRoot.querySelector('.markdown-body')?.innerHTML || '';\n  }\n}\n\ncustomElements.define('pan-markdown-renderer', PanMarkdownRenderer);\nexport default PanMarkdownRenderer;\n"],
  "mappings": "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",
  "names": []
}
