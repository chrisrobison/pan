{
  "version": 3,
  "sources": ["../../pan/components/pan-theme-provider.mjs"],
  "sourcesContent": ["/**\n * pan-theme-provider\n *\n * Manages theme state and automatically responds to system light/dark mode preferences.\n * Broadcasts theme changes via PAN for coordinated updates across components.\n *\n * Usage:\n *   <pan-theme-provider></pan-theme-provider>\n *\n * Events emitted via PAN:\n *   - theme.changed: { theme: 'light' | 'dark' | 'auto', effective: 'light' | 'dark' }\n *   - theme.system-changed: { theme: 'light' | 'dark' }\n *\n * Attributes:\n *   - theme: 'light' | 'dark' | 'auto' (default: 'auto')\n */\nexport class PanThemeProvider extends HTMLElement {\n  static observedAttributes = ['theme'];\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this._theme = 'auto'; // 'light', 'dark', or 'auto'\n    this._systemTheme = this._getSystemTheme();\n    this._mediaQuery = null;\n  }\n\n  connectedCallback() {\n    this.render();\n    this._setupSystemThemeListener();\n    this._applyTheme();\n    this._broadcastThemeChange();\n  }\n\n  disconnectedCallback() {\n    if (this._mediaQuery) {\n      this._mediaQuery.removeEventListener('change', this._handleSystemThemeChange);\n    }\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'theme' && oldValue !== newValue) {\n      this._theme = newValue || 'auto';\n      this._applyTheme();\n      this._broadcastThemeChange();\n    }\n  }\n\n  render() {\n    this.shadowRoot.innerHTML = `\n      <style>\n        :host {\n          display: none;\n        }\n      </style>\n    `;\n  }\n\n  _getSystemTheme() {\n    if (typeof window === 'undefined') return 'light';\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  }\n\n  _setupSystemThemeListener() {\n    if (typeof window === 'undefined') return;\n\n    this._mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    this._handleSystemThemeChange = this._handleSystemThemeChange.bind(this);\n    this._mediaQuery.addEventListener('change', this._handleSystemThemeChange);\n  }\n\n  _handleSystemThemeChange(e) {\n    this._systemTheme = e.matches ? 'dark' : 'light';\n\n    // Broadcast system theme change\n    this._broadcast('theme.system-changed', {\n      theme: this._systemTheme\n    });\n\n    // Re-apply theme if in auto mode\n    if (this._theme === 'auto') {\n      this._applyTheme();\n      this._broadcastThemeChange();\n    }\n  }\n\n  _getEffectiveTheme() {\n    if (this._theme === 'auto') {\n      return this._systemTheme;\n    }\n    return this._theme;\n  }\n\n  _applyTheme() {\n    const effectiveTheme = this._getEffectiveTheme();\n\n    // Apply to document root\n    document.documentElement.setAttribute('data-theme', effectiveTheme);\n\n    // Update color-scheme for browser UI\n    document.documentElement.style.colorScheme = effectiveTheme;\n  }\n\n  _broadcastThemeChange() {\n    this._broadcast('theme.changed', {\n      theme: this._theme,\n      effective: this._getEffectiveTheme()\n    });\n  }\n\n  _broadcast(topic, data) {\n    // Use PAN bus if available\n    const bus = document.querySelector('pan-bus');\n    if (bus) {\n      bus.publish(topic, data);\n    }\n\n    // Also dispatch as a custom event for non-PAN listeners\n    this.dispatchEvent(new CustomEvent('theme-change', {\n      bubbles: true,\n      composed: true,\n      detail: data\n    }));\n  }\n\n  // Public API\n  setTheme(theme) {\n    if (['light', 'dark', 'auto'].includes(theme)) {\n      this.setAttribute('theme', theme);\n    }\n  }\n\n  getTheme() {\n    return this._theme;\n  }\n\n  getEffectiveTheme() {\n    return this._getEffectiveTheme();\n  }\n\n  getSystemTheme() {\n    return this._systemTheme;\n  }\n}\n\ncustomElements.define('pan-theme-provider', PanThemeProvider);\n"],
  "mappings": "AAgBO,MAAM,yBAAyB,YAAY;AAAA,EAChD,OAAO,qBAAqB,CAAC,OAAO;AAAA,EAEpC,cAAc;AACZ,UAAM;AACN,SAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AAClC,SAAK,SAAS;AACd,SAAK,eAAe,KAAK,gBAAgB;AACzC,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,oBAAoB;AAClB,SAAK,OAAO;AACZ,SAAK,0BAA0B;AAC/B,SAAK,YAAY;AACjB,SAAK,sBAAsB;AAAA,EAC7B;AAAA,EAEA,uBAAuB;AACrB,QAAI,KAAK,aAAa;AACpB,WAAK,YAAY,oBAAoB,UAAU,KAAK,wBAAwB;AAAA,IAC9E;AAAA,EACF;AAAA,EAEA,yBAAyB,MAAM,UAAU,UAAU;AACjD,QAAI,SAAS,WAAW,aAAa,UAAU;AAC7C,WAAK,SAAS,YAAY;AAC1B,WAAK,YAAY;AACjB,WAAK,sBAAsB;AAAA,IAC7B;AAAA,EACF;AAAA,EAEA,SAAS;AACP,SAAK,WAAW,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9B;AAAA,EAEA,kBAAkB;AAChB,QAAI,OAAO,WAAW,YAAa,QAAO;AAC1C,WAAO,OAAO,WAAW,8BAA8B,EAAE,UAAU,SAAS;AAAA,EAC9E;AAAA,EAEA,4BAA4B;AAC1B,QAAI,OAAO,WAAW,YAAa;AAEnC,SAAK,cAAc,OAAO,WAAW,8BAA8B;AACnE,SAAK,2BAA2B,KAAK,yBAAyB,KAAK,IAAI;AACvE,SAAK,YAAY,iBAAiB,UAAU,KAAK,wBAAwB;AAAA,EAC3E;AAAA,EAEA,yBAAyB,GAAG;AAC1B,SAAK,eAAe,EAAE,UAAU,SAAS;AAGzC,SAAK,WAAW,wBAAwB;AAAA,MACtC,OAAO,KAAK;AAAA,IACd,CAAC;AAGD,QAAI,KAAK,WAAW,QAAQ;AAC1B,WAAK,YAAY;AACjB,WAAK,sBAAsB;AAAA,IAC7B;AAAA,EACF;AAAA,EAEA,qBAAqB;AACnB,QAAI,KAAK,WAAW,QAAQ;AAC1B,aAAO,KAAK;AAAA,IACd;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,cAAc;AACZ,UAAM,iBAAiB,KAAK,mBAAmB;AAG/C,aAAS,gBAAgB,aAAa,cAAc,cAAc;AAGlE,aAAS,gBAAgB,MAAM,cAAc;AAAA,EAC/C;AAAA,EAEA,wBAAwB;AACtB,SAAK,WAAW,iBAAiB;AAAA,MAC/B,OAAO,KAAK;AAAA,MACZ,WAAW,KAAK,mBAAmB;AAAA,IACrC,CAAC;AAAA,EACH;AAAA,EAEA,WAAW,OAAO,MAAM;AAEtB,UAAM,MAAM,SAAS,cAAc,SAAS;AAC5C,QAAI,KAAK;AACP,UAAI,QAAQ,OAAO,IAAI;AAAA,IACzB;AAGA,SAAK,cAAc,IAAI,YAAY,gBAAgB;AAAA,MACjD,SAAS;AAAA,MACT,UAAU;AAAA,MACV,QAAQ;AAAA,IACV,CAAC,CAAC;AAAA,EACJ;AAAA;AAAA,EAGA,SAAS,OAAO;AACd,QAAI,CAAC,SAAS,QAAQ,MAAM,EAAE,SAAS,KAAK,GAAG;AAC7C,WAAK,aAAa,SAAS,KAAK;AAAA,IAClC;AAAA,EACF;AAAA,EAEA,WAAW;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,oBAAoB;AAClB,WAAO,KAAK,mBAAmB;AAAA,EACjC;AAAA,EAEA,iBAAiB;AACf,WAAO,KAAK;AAAA,EACd;AACF;AAEA,eAAe,OAAO,sBAAsB,gBAAgB;",
  "names": []
}
